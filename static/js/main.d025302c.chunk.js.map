{"version":3,"sources":["TimeSet.js","App.js","serviceWorker.js","index.js"],"names":["TimeSet","props","className","title","onClick","decreaseHandler","time","increaseHandler","App","handleIncrease","state","sessionTime","setState","undefined","loop","timeCounter","breakTime","handleDecrease","minuteToSecond","count","minute","Math","floor","second","handlePlay","isPlay","clearInterval","console","log","setInterval","handleReset","handleSkip","this","sessionTimer","breakTimer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d025302c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TimeSet.css'\r\n\r\nfunction TimeSet(props) {\r\n\r\n  return(\r\n    <div className='timeset'>\r\n      <h3>{props.title}</h3>\r\n      <div className='timer-setter'>\r\n        <button onClick={props.decreaseHandler}>-</button>\r\n        <span>{props.time}</span>\r\n        <button onClick={props.increaseHandler}>+</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeSet","import React from 'react';\nimport './App.css';\nimport TimeSet from './TimeSet'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.loop = undefined;\n    this.state = {\n      breakTime: 5,\n      sessionTime: 25,\n      timeCounter: 25 * 60,\n      isPlay: false,\n      title: 'Session'\n    }\n  }\n\n  handleIncrease = (title) => {\n    if(title === 'Session Length') {\n      if(this.state.sessionTime < 60){\n        this.setState({\n          sessionTime: this.state.sessionTime + 1, \n        });\n        if(this.loop === undefined) {\n          this.setState({\n            timeCounter: (this.state.timeCounter + 1 * 60)\n          })\n        }\n      }\n    } else {\n      if(this.state.breakTime < 60) {\n        this.setState({\n          breakTime: this.state.breakTime + 1\n        })\n      }\n    }\n  }\n\n  handleDecrease = (title) => {\n    if(title === 'Session Length') {\n      if(this.state.sessionTime > 1){\n        this.setState({\n          sessionTime: this.state.sessionTime - 1, \n        });\n        if(this.loop === undefined) {\n          this.setState({\n            timeCounter: (this.state.timeCounter - 1 * 60)\n          })\n        }\n      }\n    } else {\n      if(this.state.breakTime > 1) {\n        this.setState({\n          breakTime: this.state.breakTime - 1\n        })\n      }\n    }\n  }\n\n  minuteToSecond = (count) => {\n    const minute = Math.floor(count / 60);\n    let second = count % 60;\n    \n    second = second < 10 ? '0' + second : second\n\n    return `${minute}:${second}`\n  }\n\n  \n\n  handlePlay = () => {\n    const {isPlay} = this.state;\n    if(isPlay) {\n      this.setState({\n        isPlay: false\n      });\n\n      clearInterval(this.loop);\n    } else {\n      this.setState({\n        isPlay: true\n      });\n      console.log(this.state.isPlay);\n\n      this.loop = setInterval(() => {\n        const { timeCounter, title, breakTime, sessionTime } = this.state;\n        \n        if(timeCounter === 0) {\n          this.setState({\n            title: (title === 'Session') ? 'Break' : 'Session',\n            timeCounter: (title === 'Session') ? (breakTime * 60) : (sessionTime * 60)\n          })\n        }\n        else {\n          this.setState({\n            timeCounter: timeCounter - 1\n          })\n        }\n      }, 1000);\n    }\n  }\n\n  handleReset = () => {\n    console.log('click reset');\n    clearInterval(this.loop);\n    this.loop = undefined;\n    this.setState({\n      timeCounter: this.state.sessionTime * 60,\n      isPlay: false,\n      title: 'Session'\n    });\n    \n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handleSkip = () => {\n\n    const { title, sessionTime, breakTime, isPlay } = this.state;\n    if(isPlay){\n      this.setState({\n        title: (title === 'Session') ? 'Break' : 'Session',\n        timeCounter: (title === 'Session') ? (breakTime * 60) : (sessionTime * 60)\n      })\n    }\n  }\n\n\n  render() {\n    const {sessionTime, breakTime, timeCounter, isPlay, title} = this.state;\n\n    const sessionTimer = {\n      title: 'Session Length',\n      time: sessionTime,\n      increaseHandler: () => this.handleIncrease(sessionTimer.title),\n      decreaseHandler: () => this.handleDecrease(sessionTimer.title)\n    }\n  \n    const breakTimer = {\n      title: 'Break Length',\n      time: breakTime,\n      increaseHandler: () => this.handleIncrease(breakTimer.title),\n      decreaseHandler: () => this.handleDecrease(breakTimer.title)\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro Clock</h1>\n        <div className='flex'>\n          <TimeSet {...breakTimer} />\n          <TimeSet {...sessionTimer} />\n        </div>\n        <div className='timer'>\n          <h3>{title}</h3>\n          <h4>{this.minuteToSecond(timeCounter)}</h4>\n          <div className='flex'>\n            <button onClick={this.handlePlay}>{isPlay ? 'Pause' : 'Play'}</button>\n            <button onClick={this.handleSkip}>Skip</button>\n            <button onClick={this.handleReset}>Reset</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}